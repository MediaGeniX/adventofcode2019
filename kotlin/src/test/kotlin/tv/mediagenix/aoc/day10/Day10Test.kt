package tv.mediagenix.aoc.day10

import org.junit.jupiter.api.Test
import org.junit.jupiter.api.TestInstance
import org.junit.jupiter.params.ParameterizedTest
import org.junit.jupiter.params.provider.Arguments
import org.junit.jupiter.params.provider.MethodSource
import tv.mediagenix.aoc.returns
import java.util.stream.Stream
import kotlin.test.assertEquals

@TestInstance(TestInstance.Lifecycle.PER_CLASS)
class Day10Test {

    @ParameterizedTest
    @MethodSource("test data simple")
    fun testExamples(input: String, x: Int, y: Int, expected: Int) = assertEquals(expected, AsteroidMap.parse(input).visibleAsteroids(x, y))

    @ParameterizedTest
    @MethodSource("test data find best")
    fun testExampleBest(input: String, expected: Spot) = assertEquals(expected, AsteroidMap.parse(input).findBestSpot())

    @Test
    fun solvePart1() = println(AsteroidMap.parse("""
        #....#.....#...#.#.....#.#..#....#
        #..#..##...#......#.....#..###.#.#
        #......#.#.#.....##....#.#.....#..
        ..#.#...#.......#.##..#...........
        .##..#...##......##.#.#...........
        .....#.#..##...#..##.....#...#.##.
        ....#.##.##.#....###.#........####
        ..#....#..####........##.........#
        ..#...#......#.#..#..#.#.##......#
        .............#.#....##.......#...#
        .#.#..##.#.#.#.#.......#.....#....
        .....##.###..#.....#.#..###.....##
        .....#...#.#.#......#.#....##.....
        ##.#.....#...#....#...#..#....#.#.
        ..#.............###.#.##....#.#...
        ..##.#.........#.##.####.........#
        ##.#...###....#..#...###..##..#..#
        .........#.#.....#........#.......
        #.......#..#.#.#..##.....#.#.....#
        ..#....#....#.#.##......#..#.###..
        ......##.##.##...#...##.#...###...
        .#.....#...#........#....#.###....
        .#.#.#..#............#..........#.
        ..##.....#....#....##..#.#.......#
        ..##.....#.#......................
        .#..#...#....#.#.....#.........#..
        ........#.............#.#.........
        #...#.#......#.##....#...#.#.#...#
        .#.....#.#.....#.....#.#.##......#
        ..##....#.....#.....#....#.##..#..
        #..###.#.#....#......#...#........
        ..#......#..#....##...#.#.#...#..#
        .#.##.#.#.....#..#..#........##...
        ....#...##.##.##......#..#..##....
    """.trimIndent()).findBestSpot())

    @Test
    fun solvePart2() = println(AsteroidMap.parse("""
        #....#.....#...#.#.....#.#..#....#
        #..#..##...#......#.....#..###.#.#
        #......#.#.#.....##....#.#.....#..
        ..#.#...#.......#.##..#...........
        .##..#...##......##.#.#...........
        .....#.#..##...#..##.....#...#.##.
        ....#.##.##.#....###.#........####
        ..#....#..####........##.........#
        ..#...#......#.#..#..#.#.##......#
        .............#.#....##.......#...#
        .#.#..##.#.#.#.#.......#.....#....
        .....##.###..#.....#.#..###.....##
        .....#...#.#.#......#.#....##.....
        ##.#.....#...#....#...#..#....#.#.
        ..#.............###.#.##....#.#...
        ..##.#.........#.##.####.........#
        ##.#...###....#..#...###..##..#..#
        .........#.#.....#........#.......
        #.......#..#.#.#..##.....#.#.....#
        ..#....#....#.#.##......#..#.###..
        ......##.##.##...#...##.#...###...
        .#.....#...#........#....#.###....
        .#.#.#..#............#..........#.
        ..##.....#....#....##..#.#.......#
        ..##.....#.#......................
        .#..#...#....#.#.....#.........#..
        ........#.............#.#.........
        #...#.#......#.##....#...#.#.#...#
        .#.....#.#.....#.....#.#.##......#
        ..##....#.....#.....#....#.##..#..
        #..###.#.#....#......#...#........
        ..#......#..#....##...#.#.#...#..#
        .#.##.#.#.....#..#..#........##...
        ....#...##.##.##......#..#..##....
    """.trimIndent()).find200th(26, 28))

    @Suppress("unused")
    private fun `test data simple`() = Stream.of(
            Arguments.of(".#", 1, 0, 0),
            Arguments.of("##", 1, 0, 1),
            Arguments.of("##", 0, 0, 1),
            Arguments.of("..#", 2, 0, 0),
            Arguments.of("..##", 2, 0, 1),
            Arguments.of("..##", 3, 0, 1),
            Arguments.of("""
                .#
                .#
            """.trimIndent(), 1, 0, 1),
            Arguments.of("""
                .#
                #.
            """.trimIndent(), 1, 0, 1),
            Arguments.of("""
                .#
                #.
            """.trimIndent(), 0, 1, 1),
            Arguments.of(".###", 3, 0, 1),
            Arguments.of(".####", 3, 0, 2),
            Arguments.of(".#####", 3, 0, 2),
            Arguments.of(".#####", 5, 0, 1),
            Arguments.of("""
                .##
                #.#
                ###
            """.trimIndent(), 0, 1, 6),
            Arguments.of("""
                .##
                #.#
                ###
            """.trimIndent(), 0, 2, 5),
            Arguments.of("""
                .##
                #.#
                ###
            """.trimIndent(), 2, 2, 4),
            Arguments.of("""
                .#..#
                .....
                #####
                ....#
                ...##
            """.trimIndent(), 1, 0, 7),
            Arguments.of("""
                .#..#
                .....
                #####
                ....#
                ...##
            """.trimIndent(), 0, 2, 6),
            Arguments.of("""
                .#..#
                .....
                #####
                ....#
                ...##
            """.trimIndent(), 4, 4, 7),
            Arguments.of("""
                .#..#
                .....
                #####
                ....#
                ...##
            """.trimIndent(), 3, 4, 8)
    )

    @Suppress("unused")
    private fun `test data find best`() = Stream.of(
            """
                .#..#
                .....
                #####
                ....#
                ...##
            """.trimIndent() returns Spot(3, 4, 8),
            """
                ......#.#.
                #..#.#....
                ..#######.
                .#.#.###..
                .#..#.....
                ..#....#.#
                #..#....#.
                .##.#..###
                ##...#..#.
                .#....####
            """.trimIndent() returns Spot(5, 8, 33),
            """
                #.#...#.#.
                .###....#.
                .#....#...
                ##.#.#.#.#
                ....#.#.#.
                .##..###.#
                ..#...##..
                ..##....##
                ......#...
                .####.###.
            """.trimIndent() returns Spot(1, 2, 35),
            """
                .#..#..###
                ####.###.#
                ....###.#.
                ..###.##.#
                ##.##.#.#.
                ....###..#
                ..#.#..#.#
                #..#.#.###
                .##...##.#
                .....#.#..
            """.trimIndent() returns Spot(6, 3, 41),
            """
                .#..##.###...#######
                ##.############..##.
                .#.######.########.#
                .###.#######.####.#.
                #####.##.#.##.###.##
                ..#####..#.#########
                ####################
                #.####....###.#.#.##
                ##.#################
                #####.##.###..####..
                ..######..##.#######
                ####.##.####...##..#
                .#####..#.######.###
                ##...#.##########...
                #.##########.#######
                .####.#.###.###.#.##
                ....##.##.###..#####
                .#.#.###########.###
                #.#.#.#####.####.###
                ###.##.####.##.#..##
            """.trimIndent() returns Spot(11, 13, 210)
    )
}